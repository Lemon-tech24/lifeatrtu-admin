generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id       String @id @default(uuid()) @map("_id")
  username String
  password String
  role     String
}

model Update {
  id      String @id @default(uuid()) @map("_id")
  author  String
  comment String
  Post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  String @db.String
}

model Blacklist {
  id         String  @id @default(uuid()) @map("_id")
  reason     String
  User       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  email      String  @unique
  userId     String  @db.String
  periodTime Int
  permanent  Boolean
}

// --------------------------------------------------------------------------------

model User {
  id            String         @id @map("_id") @db.String
  email         String         @unique
  name          String
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  reports       Report[]
  engages       Engage[]
  createdAt     DateTime       @default(now())
  notifications Notification[]
  postTime      Int?
  deleteTime    Int?
  editTime      Int?
  blacklists    Blacklist[]
}

model Post {
  id            String         @id @default(uuid()) @map("_id") @db.String
  title         String
  focus         String
  content       String
  anonymous     Boolean
  image         String
  userId        String         @db.String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  engages       Engage[]
  likes         Like[]
  comments      Comment[]
  reports       Report[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  notifications Notification[]
  updates       Update[]
  pending       Boolean
}

model Engage {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.String
}

model Like {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.String
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @db.String
  content   String
  createdAt DateTime @default(now())
}

model Report {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  postId    String   @db.String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String   @db.String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reason    String
  createdAt DateTime @default(now())
}

model Notification {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  postId String  @db.String
  post   Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId String  @db.String
  read   Boolean
  type   String
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
